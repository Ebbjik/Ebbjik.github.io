<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dom_学习</title>
      <link href="/2025/06/14/dom-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/06/14/dom-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>什么是dom,dom全名<strong>Document Object Model（文档对象模型）</strong>，是浏览器提供的<strong>以编程方式操作网页内容的接口</strong></p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;intro&quot;</span>&gt;</span>你好，世界！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> para = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;intro&quot;</span>);<br>para.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;你好，DOM！&quot;</span>;<br></code></pre></td></tr></table></figure><p>这段代码就会把网页中的文字“你好，世界！”变成“你好，DOM！”。</p><p>在网页开发中，较多的用法是通过特定接口获取dom,再对其添加或是删去类名，以动态修改其样式</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="从EventTarget继承"><a href="#从EventTarget继承" class="headerlink" title="从EventTarget继承"></a>从<code>EventTarget</code>继承</h2><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener()"></a><code>addEventListener()</code></h3><p>这个方法将指定的监听器注册到 EventTarget 上，当该对象触发指定的事件时，指定的回调函数就会被执行。事件目标可以是一个文档上的元素 Element、Document 和 Window，也可以是任何支持事件的对象（比如 XMLHttpRequest）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">addEventListener</span>(type, listener);<br><span class="hljs-title function_">addEventListener</span>(type, listener, options);<br><span class="hljs-title function_">addEventListener</span>(type, listener, useCapture);<br></code></pre></td></tr></table></figure><ul><li><p>type<br>字符串，表示监听的事件类型，比如<code>click</code>、<code>keydown</code>、<code>DOMContentLoaded</code></p></li><li><p>listener<br>回调函数，事件发生时被调用</p></li><li><p>options 可选<br>一个对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>capture<span class="hljs-punctuation">:</span> Boolean<span class="hljs-punctuation">,</span> <span class="hljs-comment">//表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发</span><br>once<span class="hljs-punctuation">:</span> Boolean<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 表示 listener 只会触发一次，执行后自动移除</span><br>passive<span class="hljs-punctuation">:</span> Boolean<span class="hljs-punctuation">,</span> <span class="hljs-comment">// 表示 listener 永远不会调用preventDefault()，用于提升滚动性能</span><br>signal<span class="hljs-punctuation">:</span> AbortSignal <span class="hljs-comment">// 表示当关联的 AbortController 的 abort() 被调用时，移除该 listener</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>useCapture 可选<br>跟上面<code>options</code>中的<code>capture</code>属性一样</p></li></ul><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="加载和卸载事件"><a href="#加载和卸载事件" class="headerlink" title="加载和卸载事件"></a>加载和卸载事件</h2><h3 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h3><p>HTML 文档被完全加载和解析完成，但图片、CSS、视频等资源可能还没加载完，此时这个事件就会被触发</p><p>在使用方法上它类似vue3中的<code>mounted</code>，都表示【现在你可以安全的访问和操作DOM元素了】<br>不然就容易出现这种问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;text&quot;</span>);</span><br><span class="language-javascript">    p.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;Hi&quot;</span>; <span class="hljs-comment">// ❌ 此时页面还没加载 &lt;p&gt;，报错或无效</span></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了避免这种报错，我们要这么做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 所有 DOM 元素都已准备好，可以安全操作</span><br>  <span class="hljs-keyword">const</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;text&quot;</span>);<br>  p.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;Hi, DOM!&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>– TODO:续写</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6_学习</title>
      <link href="/2025/06/12/ES6-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/06/12/ES6-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>let 与 const</p><span id="more"></span><p><a href="https://tony-code.github.io/javascript-ES6/book/docs/let.html">文档链接🔗</a></p><h1 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h1><p>ES6中新增了<code>let</code>命令，用法与<code>var</code>类似，主要区别就是作用域不同</p><ul><li><code>var</code>如果在函数中写是函数作用域声明，如果不在，那就是全局作用域</li><li><code>let</code>是块级作用域声明</li></ul><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>即<code>var</code>声明的变量在整个<strong>函数内部</strong>都有效，可以跨越代码块<code>&#123;&#125;</code>，例如</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">testVar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x); <span class="hljs-comment">// ✅ 输出 1，即使 x 是在 if 块里声明的</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><code>let</code>声明的变量只在最近的一对<code>&#123;&#125;</code>花括号中有效，这种声明可以有效避免变脸‘泄漏’例如</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">testLet</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    let y = <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(y); <span class="hljs-comment">// ❌ 报错：y is not defined</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ES6允许块级作用域的任意嵌套</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-tag">&#123;&#123;&#123;&#123;</span><br><span class="hljs-template-tag">  &#123;<span class="hljs-name">let</span> insane = <span class="hljs-string">&#x27;Hello World&#x27;</span>&#125;</span><br><span class="hljs-template-tag">  console.log(<span class="hljs-name">insane</span>); // 报错</span><br><span class="hljs-template-tag">&#125;&#125;&#125;&#125;</span><span class="language-xml">;</span><br></code></pre></td></tr></table></figure><p>外层作用域无法读取内层作用域的变量，但内层在一些情况可以访问上层变量</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-tag">&#123;&#123;&#123;&#123;</span><br><span class="hljs-template-tag">  <span class="hljs-name">let</span> insane = <span class="hljs-string">&#x27;Hello World out&#x27;</span>;</span><br><span class="hljs-template-tag">  &#123;</span><br><span class="hljs-template-tag">    let insane = <span class="hljs-string">&#x27;Hello World in&#x27;</span></span><br><span class="hljs-template-tag">    console.log(<span class="hljs-name">insane</span>) //Hello World in</span><br><span class="hljs-template-tag">  &#125;</span><br><span class="hljs-template-tag">&#125;&#125;&#125;&#125;</span><span class="language-xml">;</span><br></code></pre></td></tr></table></figure><p>内层作用域可以定义外层作用域的同名变量，且在使用变量时会优先使用当前作用域的，如果没有，则会向上层查找</p><p>但是<code>var</code>不支持块级作用域，在代码块<code>&#123;&#125;</code>中声明的变量会被<strong>提升</strong>到函数顶部或全局作用域</p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p><code>var</code>声明的变量会被提升到作用域顶部，但不会被初始化<br>例如：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 20</span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a; <span class="hljs-comment">// 声明被提升到顶部</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// undefined（已声明但未赋值）</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>  a = <span class="hljs-number">10</span>; <span class="hljs-comment">// 不会执行</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 还是 undefined</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  a = <span class="hljs-number">20</span>; <span class="hljs-comment">// 执行了，a 被赋值为 20</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 输出 20</span><br></code></pre></td></tr></table></figure><p><code>let</code> 不存在变量变量提升，如果试图在变量声明前调用它的话，就会报错</p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p>如果<code>var</code>不在函数中声明，那他就是全局作用变量，即所有地方都可访问到他</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> []<span class="hljs-comment">;</span><br>for (var i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 10; i++) &#123;</span><br>  a[i] <span class="hljs-operator">=</span> function () &#123;<br>    console.log(i)<span class="hljs-comment">;</span><br>  &#125;<span class="hljs-comment">;</span><br>&#125;<br>a[<span class="hljs-number">6</span>]()<span class="hljs-comment">; // 10</span><br></code></pre></td></tr></table></figure><p>这样的循环可以像这样展开</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br><span class="hljs-keyword">var</span> a = [];<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><br>a[i] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i); &#125;; i++;<br>a[i] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i); &#125;; i++;<br>a[i] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i); &#125;; i++;<br>...<br></code></pre></td></tr></table></figure><h2 id="暂时性死区-TDZ"><a href="#暂时性死区-TDZ" class="headerlink" title="暂时性死区(TDZ)"></a>暂时性死区(TDZ)</h2><p>只要在块级作用域中用<code>let</code>声明了变量，这个变量就会‘绑定’这个区域，不再受外部影响<br>即：这个变量名在作用域中只能是<code>let</code>声明的那个，不存在说使用同名的全局变量</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-comment">// TDZ开始</span><br>  tmp = <span class="hljs-string">&#x27;abc&#x27;</span>; <span class="hljs-comment">// ReferenceError</span><br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(tmp); <span class="hljs-comment">// ReferenceError</span><br><br>  let tmp; <span class="hljs-comment">// TDZ结束</span><br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(tmp); <span class="hljs-comment">// undefined</span><br><br>  tmp = <span class="hljs-number">123</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(tmp); <span class="hljs-comment">// 123</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h2><p><code>let</code>不允许在相同作用域内重复声明同一个变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 报错</span><br><span class="hljs-function">function <span class="hljs-title">func</span>()</span> &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 报错</span><br><span class="hljs-function">function <span class="hljs-title">func</span>()</span> &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此在很函数内重新声明参数也是不对的，因为JavaScript 会在函数作用域内，自动为每个参数名（如 arg）创建一个变量绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">arg</span>) &#123;<br>  <span class="hljs-keyword">let</span> arg; <span class="hljs-comment">// 报错</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">arg</span>) &#123;<br>  &#123;<br>    <span class="hljs-keyword">let</span> arg; <span class="hljs-comment">// 不报错</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p><code>const</code>的作用是声明一个只读常量，一旦声明，不可改变</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">const</span> <span class="hljs-literal">PI</span> = <span class="hljs-number">3.1415</span>;<br><span class="hljs-literal">PI</span> <span class="hljs-comment">// 3.1415</span><br><br><span class="hljs-literal">PI</span> = <span class="hljs-number">3</span>;<br><span class="hljs-comment">// TypeError: Assignment to constant variable.</span><br></code></pre></td></tr></table></figure><p>因为一旦声明就不能改变，那就意味着声明的同时就必须初始化，不能留到后面再赋值<br>即：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> foo;<br><span class="hljs-comment">// SyntaxError: Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><p>在作用域方面，<code>cosnt</code>与<code>let</code>相同，同样是<strong>块级作用域</strong>，同样是存在<strong>暂时性死区</strong>，同样是<strong>不可提升</strong></p><p><code>cosnt</code>也不可以重复重复声明</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var message <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello!&quot;</span><span class="hljs-comment">;</span><br>let age <span class="hljs-operator">=</span> <span class="hljs-number">25</span><span class="hljs-comment">;</span><br><br>// 以下两行都会报错<br>const message <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Goodbye!&quot;</span><span class="hljs-comment">;</span><br>const age <span class="hljs-operator">=</span> <span class="hljs-number">30</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p><code>const</code>声明常量不可改变，实际上保证的不是变量的值不可改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p><p>即：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const foo <span class="hljs-operator">=</span> &#123;&#125;<span class="hljs-comment">;</span><br><br>// 为 foo 添加一个属性，可以成功<br>foo.prop <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br>foo.prop // <span class="hljs-number">123</span><br><br>// 将 foo 指向另一个对象，就会报错<br><span class="hljs-attribute">foo</span> <span class="hljs-operator">=</span> &#123;&#125;<span class="hljs-comment">; // TypeError: &quot;foo&quot; is read-only</span><br></code></pre></td></tr></table></figure><p>这是另一个数组的例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const a = [];<br>a.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>); <span class="hljs-comment">// 可执行</span><br>a.<span class="hljs-built_in">length</span> = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 可执行</span><br>a = [<span class="hljs-string">&#x27;Dave&#x27;</span>];    <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><h1 id="ES6声明变量的6种方法"><a href="#ES6声明变量的6种方法" class="headerlink" title="ES6声明变量的6种方法"></a>ES6声明变量的6种方法</h1><ol><li><code>var</code>声明变量</li><li><code>function</code>声明函数</li><li><code>let</code>声明变量</li><li><code>const</code>声明变量</li><li><code>import</code>声明模块变量</li><li><code>class</code>声明类</li></ol><p>–TODO: 续写</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/05/31/hello-world/"/>
      <url>/2025/05/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flex用法</title>
      <link href="/2025/05/14/flex%E7%94%A8%E6%B3%95/"/>
      <url>/2025/05/14/flex%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这篇文章学习怎么使用<code>css</code>中的<code>flex</code>用法</p><span id="more"></span><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox">官方文档</a></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><code>flex</code>，全名为Flexible Box模型，通常被称为<code>flexbox</code>，是一种一维的布局模型<br>我们说 flexbox 是一种一维的布局，是因为一个 flexbox 一次只能处理一个维度上的元素布局，一行或者一列。作为对比的是另外一个二维布局 CSS Grid Layout，可以同时处理行和列上的布局。</p><p>–TODO: 写一篇关于grid的blog</p><h1 id="轴线"><a href="#轴线" class="headerlink" title="轴线"></a>轴线</h1><p><code>flex</code>具有两条轴线–主轴和交叉轴</p><h2 id="主轴"><a href="#主轴" class="headerlink" title="主轴"></a>主轴</h2><p>主轴由<code>flex-direction</code>定义，可取四个枚举值</p><ul><li><code>row</code></li><li><code>row-reverse</code></li><li><code>column</code></li><li><code>column-reverse</code></li></ul><p>两两分组，当设置为前两个时，主轴将沿着<strong>行向</strong>延伸，这时盒子中的元素就会全部排成一行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">display:</span> &#x27;<span class="hljs-attr">flex</span>&#x27;, <span class="hljs-attr">gap:</span> &#x27;<span class="hljs-attr">10px</span>&#x27; &#125;&#125;&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> &#x27;<span class="hljs-attr">lightblue</span>&#x27;, <span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">10px</span>&#x27; &#125;&#125;&gt;</span>子项 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> &#x27;<span class="hljs-attr">lightgreen</span>&#x27;, <span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">10px</span>&#x27; &#125;&#125;&gt;</span>子项 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> &#x27;<span class="hljs-attr">lightcoral</span>&#x27;, <span class="hljs-attr">padding:</span> &#x27;<span class="hljs-attr">10px</span>&#x27; &#125;&#125;&gt;</span>子项 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="display: flex; gap: 10px;">  <div style="background: lightblue; padding: 10px;">子项 1</div>  <div style="background: lightgreen; padding: 10px;">子项 2</div>  <div style="background: lightcoral; padding: 10px;">子项 3</div></div><p>相对的，设置为后两个时，主轴沿着页面的上下方向延伸–也就是<strong>块向</strong>，此时盒子里的每个元素都会独占一行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex; flex-direction: column; gap: 10px;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: lightblue; padding: 10px;&quot;</span>&gt;</span>子项 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: lightgreen; padding: 10px;&quot;</span>&gt;</span>子项 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: lightcoral; padding: 10px;&quot;</span>&gt;</span>子项 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="display: flex; flex-direction: column; gap: 10px;">  <div style="background: lightblue; padding: 10px;">子项 1</div>  <div style="background: lightgreen; padding: 10px;">子项 2</div>  <div style="background: lightcoral; padding: 10px;">子项 3</div></div><h2 id="交叉轴"><a href="#交叉轴" class="headerlink" title="交叉轴"></a>交叉轴</h2><p>交叉轴就是垂直于主轴的一条轴线<br>所以如果你的<code>flex-direction</code>（主轴）设成了 <code>row</code> 或者 <code>row-reverse</code> 的话，交叉轴的方向就是沿着上下方向延伸的。<br>如果主轴方向设成了 <code>column</code> 或者 <code>column-reverse</code>，交叉轴就是水平方向。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol><li><p>align-items<br><code>align-items</code> 属性用于设置 Flex 容器中子元素在交叉轴（垂直轴）上的对齐方式。它包含很多枚举值,flex布局中常用的有以下四种：<br>更多的见<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items">官方文档</a></p><ul><li><strong>stretch</strong> (默认值)<br>当子元素没有指定固定尺寸时，子元素会沿着交叉轴方向拉伸，填满父容器在该方向上的空间。</li><li><strong>center</strong><br>flex 元素的外边距框在交叉轴上居中对齐。如果元素的交叉轴尺寸大于 flex 容器，它将在两个方向上等距溢出。</li><li><strong>self-start</strong><br>将元素与容器的主轴起点或交叉轴起点对齐，轴起点的方向对应于元素的起始方向。</li><li><strong>self-end</strong><br> 将元素与容器的主轴末端或交叉轴末端对齐，轴末端的方向对应于元素的结尾方向。</li></ul></li><li><p>justify-content<br><code>justify-content</code> 属性用于设置 Flex 容器中子元素在主轴上的对齐方式。它包含很多枚举值,flex布局中常用的有以下几种：<br>更多的见<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content">官方文档</a></p><ul><li><strong>stretch</strong><br>如果元素沿主轴的组合尺寸小于对齐容器的尺寸，任何尺寸设置为<code>auto</code>的元素都会等比例地增加其尺寸（而不是按比例增加），同时仍然遵守由<code>max-height</code>&#x2F;<code>max-width</code>（或相应功能）施加的约束，以便沿主轴完全填充对齐容器的组合尺寸。</li><li><strong>center</strong><br>伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。</li><li><strong>self-start</strong> (默认值)<br>元素紧密地排列在弹性容器的主轴起始侧。仅应用于弹性布局的项目。对于不是弹性容器里的元素，此值将被视为<code>start</code>。</li><li><strong>self-end</strong><br>元素紧密地排列在弹性容器的主轴结束侧。仅应用于弹性布局的元素。对于不是弹性容器里的元素，此值将被视为<code>end</code>。</li><li><strong>space-around</strong><br>在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。</li><li><strong>space-between</strong><br>在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。</li></ul></li></ol><h1 id="Flex容器"><a href="#Flex容器" class="headerlink" title="Flex容器"></a>Flex容器</h1><p>文档中采用了 flexbox 的区域就叫做 flex 容器。为了创建<code>flex</code> 容器，我们把一个容器的<code>display</code>属性值改为<code>flex</code>或者<code>inline-flex</code>。完成这一步之后，容器中的直系子元素就会变为<strong>flex</strong> 元素。由于所有 CSS 属性都会有一个初始值，所以 flex 容器中的所有 flex 元素都会有下列行为：</p><ul><li>元素排列成一行(<code>flex-direction</code>初始值为<code>row</code>)</li><li>元素从主轴的起始线开始</li><li>元素不会在主维度方向拉伸，但是可以缩小</li><li><code>flex-basis</code>属性为<code>auto</code></li><li><code>flex-wrap</code>属性为<code>nowrap</code></li></ul><h2 id="Flex容器的子元素默认有这样的属性flex-0-1-auto"><a href="#Flex容器的子元素默认有这样的属性flex-0-1-auto" class="headerlink" title="Flex容器的子元素默认有这样的属性flex: 0 1 auto"></a>Flex容器的子元素默认有这样的属性<code>flex: 0 1 auto</code></h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">flex:</span> <span class="hljs-symbol">&lt;flex-grow&gt;</span> <span class="hljs-symbol">&lt;flex-shrink&gt;</span> <span class="hljs-symbol">&lt;flex-basis&gt;</span>;<br></code></pre></td></tr></table></figure><ul><li>flex-grow<br>元素是否可以扩张</li><li>flex-shrink<br>元素是否可以收缩</li><li>flex-basis<br>元素的默认大小</li></ul><div class="box">  <div>One</div>  <div>Two</div>  <div>Three <br />has <br />extra <br />text</div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Three <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>has <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>extra <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &gt; * &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span> / <span class="hljs-number">0.2</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dotted <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span>);<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>row-reverse</code>和<code>column-reverse</code>属性的效果是在原基础上起始线和终止线位置互换</p><div class="box-reverse">  <div>One</div>  <div>Two</div>  <div>Three <br />has <br />extra <br />text</div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-reverse&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Three <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>has <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>extra <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box-reverse</span> &gt; * &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span> / <span class="hljs-number">0.2</span>);<br>&#125;<br><br><span class="hljs-selector-class">.box-reverse</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dotted <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span>);<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row-reverse;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="用flex-wrap实现多行Flex容器"><a href="#用flex-wrap实现多行Flex容器" class="headerlink" title="用flex-wrap实现多行Flex容器"></a>用<code>flex-wrap</code>实现多行Flex容器</h1><p><code>flex-wrap</code>切换为<code>wrap</code>后，元素会自动换行</p><div class="box-wrap">  <div>One</div>  <div>Two</div>  <div>Three</div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-wrap&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Three <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>has <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>extra <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box-wrap</span> &gt; * &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span> / <span class="hljs-number">0.2</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box-wrap</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dotted <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span>);<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="简写属性flex-flow"><a href="#简写属性flex-flow" class="headerlink" title="简写属性flex-flow"></a>简写属性<code>flex-flow</code></h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-flow">官方文档</a></p><p><code>flex-direction</code>和<code>flex-wrap</code>可以被组合简写为<code>flex-flow</code></p><p>像这样</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">flex-flow:</span> <span class="hljs-symbol">&lt;flex-direction&gt;</span> <span class="hljs-symbol">&lt;flex-wrap&gt;</span><br></code></pre></td></tr></table></figure><p>实例：</p><div class="flex-flow-box">  <div>One</div>  <div>Two</div>  <div>Three</div></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-selector-class">.flex-flow-box</span> &gt; * &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span> / <span class="hljs-number">0.2</span>);<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.flex-flow-box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> dotted <span class="hljs-built_in">rgb</span>(<span class="hljs-number">96</span> <span class="hljs-number">139</span> <span class="hljs-number">168</span>);<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-flow</span>: row wrap;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="flex元素上的属性"><a href="#flex元素上的属性" class="headerlink" title="flex元素上的属性"></a>flex元素上的属性</h1><p>为了更好地控制 flex 元素，有三个属性可以作用于它们：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow">flex-grow</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink">flex-shrink</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis">flex-basis</a></li></ul><p>这几个flex属性的作用其实就是改变了flex容器中可用空间的行为</p><h2 id="可用空间"><a href="#可用空间" class="headerlink" title="可用空间"></a>可用空间</h2><p>假设在 1 个 500px 的容器中，我们有 3 个 100px 宽的元素，那么这 3 个元素需要占 300px 的宽，剩下 200px 的可用空间。在默认情况下，flexbox 的行为会把这 200px 的空间留在最后一个元素的后面。</p><p>如果期望这些元素能自动地扩展去填充满剩下的空间，那么我们需要去控制可用空间在这几个元素间如何分配，这就是元素上的那些<code>flex</code>属性要做的事。</p><h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h2><p><code>flex-basis</code>定义元素的<strong>空间大小</strong>，默认值为<code>auto</code>，其实就是子元素在主轴方向上的大小，它决定了在浏览器分配剩余空间之前，Flex子元素本来的尺寸</p><ul><li><p>默认值为<code>auto</code>，意味着如果没有显式的设置<code>flex-basis</code>，浏览器会根据内容大小或<code>width</code>或<code>height</code>来决定元素的初始尺寸</p></li><li><p><code>flex-basis</code>为<code>auto</code>的基础上，如果用<code>width</code>或<code>height</code>设置了主轴方向上的尺寸，<code>flex-basis</code>就会采用它</p></li><li><p>但如果显式的设置了<code>flex-basis</code>，它会覆盖<code>width</code>或<code>height</code></p></li></ul><p>总结：flex容器中的子元素在主轴方向的尺寸 flex-basis &gt; width&#x2F;height &gt; 内容<br>即，没有设置<code>flex-basis</code>的话，按<code>width</code>&#x2F;<code>height</code>来，<code>width</code>&#x2F;<code>height</code>也没有设置，按内容来</p><h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><code>flex-grow</code></h2><p><code>flex-grow</code>定义了在主轴方向上元素如何’扩展’来填充容器的可用空间</p><p>它接受正数赋值，这个数字不是像素值，而是「比例」，它的默认值是0，此时它不会扩展，设置为正数时，就会拓展以占据可用空间，当有多个元素被设置<code>flex-grow</code>时，他们会按照<code>flex-grow</code>来按比例划分可用区域</p><p>例子：</p><ol><li>元素均等扩展</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，如果容器主轴上有 300px 可用空间，三个子元素会各占：</p><ul><li>每个元素分得：300 &#x2F; 3 &#x3D; 100px</li></ul><ol start="2"><li>元素按比例扩展</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item1</span> &#123;<br>  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-selector-class">.item2</span>,<br><span class="hljs-selector-class">.item3</span> &#123;<br>  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果有 400px 可用空间，则总比例是 2 + 1 + 1 &#x3D; 4：</p><ul><li><p>item1 分得：400 × (2&#x2F;4) &#x3D; 200px</p></li><li><p>item2 和 .item3 各分得：400 × (1&#x2F;4) &#x3D; 100px</p></li></ul><h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><code>flex-shrink</code></h2><p><code>flex-shrink</code>定义了当Flex容器空间不足时，子元素在主轴方向上如何收缩<br>即空间不足时：谁先让，让多少</p><ul><li>它的默认值是1，代表允许收缩，</li><li><code>0</code>代表允许收缩</li><li>整个正整数同样代表比例，当多个元素都具有这个正整数值时，数值越大，收缩越多</li></ul><p>例子：</p><ol><li>元素均等收缩</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，如果容器主轴上宽度为300px，但三个子元素共占据600px，所以他们都要收缩，共需要收缩300px<br>因为<code>flex-shrink</code>都是1，所以均分，各收缩100px</p><ol start="2"><li>元素按比例收缩</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item1</span> &#123;<br>  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">2</span>;<br>  <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.item2</span>,<br><span class="hljs-selector-class">.item3</span> &#123;<br>  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样共需要收缩300px，但是按比例，<code>item1</code>收缩四分之二，即100px，<code>item2,item3</code>各占四分之一，即100px</p><p>但元素不会无限制的收缩，最小尺寸会限制它</p><ul><li><code>min-height</code>&#x2F;<code>min-width</code></li><li>内容自动撑开的尺寸，像是文字或图片</li></ul><h2 id="Flex属性的简写"><a href="#Flex属性的简写" class="headerlink" title="Flex属性的简写"></a>Flex属性的简写</h2><p>以上三种样式可以像这样合并写到一起</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">flex:</span> <span class="hljs-symbol">&lt;flex-grow&gt;</span> <span class="hljs-symbol">&lt;flex-shrink&gt;</span> <span class="hljs-symbol">&lt;flex-basis&gt;</span><br></code></pre></td></tr></table></figure><p>还有预定义的简写形式</p><ul><li>flex: initial<br>相当于<code>flex: 0 1 auto</code></li><li>flex: auto<br>相当于<code>flex: 1 1 auto</code></li><li>flex: none<br>相当于<code>flex: 0 0 auto</code></li><li>flex: &lt;positive-number&gt;<br>相当于<code>flex: positive-number 1 0</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的类</title>
      <link href="/2025/05/13/js%E4%B8%AD%E7%9A%84%E7%B1%BB/"/>
      <url>/2025/05/13/js%E4%B8%AD%E7%9A%84%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>这篇文章学习<code>JavaScript</code>中的<code>Classes</code></p><span id="more"></span><p><a href="https://www.w3schools.com/js//js_classes.asp">官方文档</a></p><p>在<code>ES6</code>中，<code>JavaScript</code>中引入了<code>Classes</code>&#x3D;&#x3D;类</p><h1 id="类是什么"><a href="#类是什么" class="headerlink" title="类是什么"></a>类是什么</h1><p>类是对象的模板</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class ClassName &#123;</span><br><span class="line">  constructor() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Car &#123;</span><br><span class="line">  constructor(name, year) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.year = year;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类中必须一直有<code>constructor（）</code>方法，这叫做构造方法</p><p>构造函数方法是一种特殊方法：</p><ul><li>它具有确切的名称<code>constructor</code></li><li>当新对象被创建时，这个函数自动执行</li><li>这个函数被用来初始化对象属性</li></ul><p>如果没有定义构造方法，<code>JavaScript</code>会自动添加一个空的构造方法</p><p>通过构造方法，就可以通过一个类源源不断的创建对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const myCar1 = new Car(&quot;Ford&quot;, 2014);</span><br><span class="line">const myCar2 = new Car(&quot;Audi&quot;, 2019);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chezmoi使用</title>
      <link href="/2025/05/11/chezmoi%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/11/chezmoi%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这篇文章学习如何安装和使用<code>chezmoi</code></p><span id="more"></span><h1 id="chezmoi的安装"><a href="#chezmoi的安装" class="headerlink" title="chezmoi的安装"></a>chezmoi的安装</h1><p><a href="https://www.chezmoi.io/install/">官方文档</a></p><p>官方给了很多安装方法<br><del>我还是用brew</del><br>在终端运行以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install chezmoi</span><br></pre></td></tr></table></figure><h1 id="chezmoi的使用"><a href="#chezmoi的使用" class="headerlink" title="chezmoi的使用"></a>chezmoi的使用</h1><h2 id="初始化chezmoi"><a href="#初始化chezmoi" class="headerlink" title="初始化chezmoi"></a>初始化chezmoi</h2><p>当安装好后，运行以下命令来初始化<code>chezmoi</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chezmoi init</span><br></pre></td></tr></table></figure><p>这将在 ~&#x2F;.local&#x2F;share&#x2F;chezmoi 中创建一个新的 git 本地仓库，chezmoi 将在其中存储其源状态。默认情况下，chezmoi 仅修改工作副本中的文件。</p><h2 id="用chezmoi管理文件"><a href="#用chezmoi管理文件" class="headerlink" title="用chezmoi管理文件"></a>用chezmoi管理文件</h2><h4 id="把文件添加到chezmoi"><a href="#把文件添加到chezmoi" class="headerlink" title="把文件添加到chezmoi"></a>把文件添加到chezmoi</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chezmoi add ~/.bashrc</span><br></pre></td></tr></table></figure><p>这会将 <code>~/.bashrc</code> 复制到 <code>~/.local/share/chezmoi/dot_bashrc</code> .</p><h4 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chezmoi edit ~/.bashrc</span><br></pre></td></tr></table></figure><p><del>也不是非要用这个，可以先改源文件，然后重新运行添加命令</del></p><h4 id="集成github"><a href="#集成github" class="headerlink" title="集成github"></a>集成github</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chezmoi cd //这会跳转到~/.local/share/chezmoi/</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:yourname/dotfiles.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial chezmoi dotfiles&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>通过这些命令，把数据同步到github<br><del>记得创建私有仓库</del></p><h3 id="在另一台电脑应用配置"><a href="#在另一台电脑应用配置" class="headerlink" title="在另一台电脑应用配置"></a>在另一台电脑应用配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chezmoi init https://github.com/$GITHUB_USERNAME/dotfiles.git</span><br><span class="line">chezmoi apply</span><br></pre></td></tr></table></figure><p>在<code>init</code>时带上仓库url，chezmoi会自动克隆远程仓库中的文件</p><h4 id="初始化后获取最新配置"><a href="#初始化后获取最新配置" class="headerlink" title="初始化后获取最新配置"></a>初始化后获取最新配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chezmoi update</span><br></pre></td></tr></table></figure><hr><p>通过chezmoi,我们可以方便的配置<code>nvim</code>,<code>.zshrc</code>之类的配置</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> chezmoi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SvelteKit-day2</title>
      <link href="/2025/05/11/SvelteKit-day2/"/>
      <url>/2025/05/11/SvelteKit-day2/</url>
      
        <content type="html"><![CDATA[<p>这篇文章学习<code>svelte</code>中的<code>Runes</code></p><span id="more"></span><h1 id="什么是Runes"><a href="#什么是Runes" class="headerlink" title="什么是Runes"></a>什么是Runes</h1><p><a href="https://svelte.dev/docs/svelte/what-are-runes">官方文档</a></p><p>他是一类以<code>$</code>符号开头的特殊符号，有以下几种</p><ul><li>$state</li><li>$derived</li><li>$effect</li><li>$props</li><li>$bindable</li><li>$inspect</li><li>$host</li></ul><p>下面分别讲解</p><h1 id="state"><a href="#state" class="headerlink" title="$state"></a>$state</h1><p><a href="https://svelte.dev/docs/svelte/$state">官方文档</a></p><p>这个符文的作用是创建一个响应式变量<span class="side">响应式就是页面会随着变量的改变自行更改</span>。</p><p>类似于<code>Vue3</code>中的<code>ref</code>，<code>reactive</code></p><p>不同的是他没有用于交互的api，像是<code>ref</code>的<code>.value</code></p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">let count = $state(0);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick=&#123;() =&gt; count++&#125;&gt;</span><br><span class="line">clicks: &#123;count&#125;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>即在使用上它没有不同</p><h2 id="深度状态-Deep-state"><a href="#深度状态-Deep-state" class="headerlink" title="深度状态 Deep state"></a>深度状态 Deep state</h2><h3 id="什么是深度状态"><a href="#什么是深度状态" class="headerlink" title="什么是深度状态"></a>什么是深度状态</h3><p>简单来说，Deep state 指的是组件或应用中「嵌套层级较深的状态数据结构」，比如嵌套对象或数组中的数据，而不仅仅是表层的简单变量。<br><strong>例子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let user = &#123;</span><br><span class="line">  name: &quot;Alice&quot;,</span><br><span class="line">  address: &#123;</span><br><span class="line">    city: &quot;Beijing&quot;,</span><br><span class="line">    street: &quot;Main St&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里，<code>user.address.city</code> 就是「深层状态」。</p><p><code>svelte</code>允许我们创建这样一个响应式对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let todos = $state([</span><br><span class="line">&#123;</span><br><span class="line">done: false,</span><br><span class="line">text: &#x27;add more todos&#x27;</span><br><span class="line">&#125;</span><br><span class="line">]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>$state</code>允许我们用数组和简单对象，但像集合和图这样的类不能被代理，但<code>svelte</code>提供了内置的响应式实现，可以从<a href="https://svelte.dev/docs/svelte/svelte-reactivity">svelte&#x2F;reactivity</a>引入</p><p>此时，修改<code>todos</code>中的某一个变量，ui中依赖他的内容都会随之改变</p><p>如果推送一个对象到数组中，这个对象同样是响应式的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">todos.push(&#123;</span><br><span class="line">done: false,</span><br><span class="line">text: &#x27;eat lunch&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是如果你解构一个响应式的值，得到的引用不会是响应式的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let &#123; done, text &#125; = todos[0];</span><br><span class="line"></span><br><span class="line">todos[0].done = !todos[0].done;</span><br></pre></td></tr></table></figure><p>像这样得到的<code>done</code>和<code>text</code>就只是普通的js变量</p><h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><p><code>$state</code>同样可以在类<code>class</code>中使用,无论是公有类还是私有类</p><p><a href="/2025/05/13/js%E4%B8%AD%E7%9A%84%E7%B1%BB/">关于class</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Todo &#123;</span><br><span class="line">done = $state(false);</span><br><span class="line">text = $state();</span><br><span class="line"></span><br><span class="line">constructor(text) &#123;</span><br><span class="line">this.text = text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reset() &#123;</span><br><span class="line">this.text = &#x27;&#x27;;</span><br><span class="line">this.done = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="alert">编译器将 done 和 text 这类用$state创建的响应式变量转换为引用私有字段的类原型上的 get / set 方法。这意味着属性是不可枚举的。</div><p>当你用 <code>for...in</code>、<code>Object.keys()</code> 之类的方法去遍历对象属性时，done 和 text 这两个属性不会被枚举</p><div class="alert">  在 JavaScript 中调用方法时，this 的值很重要</div><h2 id="下面两种调用方法，第一种会报错"><a href="#下面两种调用方法，第一种会报错" class="headerlink" title="下面两种调用方法，第一种会报错"></a>下面两种调用方法，第一种会报错</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=&#123;todo.reset&#125;&gt;</span><br><span class="line">reset</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=&#123;() =&gt; todo.reset()&#125;&gt;</span><br><span class="line">reset</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>或者在类中定义方法时使用箭头函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Todo &#123;</span><br><span class="line">done = $state(false);</span><br><span class="line">text = $state();</span><br><span class="line"></span><br><span class="line">constructor(text) &#123;</span><br><span class="line">this.text = text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reset = () =&gt; &#123;</span><br><span class="line">this.text = &#x27;&#x27;;</span><br><span class="line">this.done = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>– TODO: 关于不同函数的blog</p><p>为什么报错，见<a href="/functions">函数之间的区别</a></p><h2 id="state-raw"><a href="#state-raw" class="headerlink" title="$state.raw"></a>$state.raw</h2><p>如果你不希望对象和数组深度响应式，可以使用<code>$state.raw</code>。</p><p>使用<code>$state.raw</code> 声明的 State 不能被改变;它只能重新分配。换句话说，如果您想更新对象或数组，而不是分配给对象的属性，或使用 push 等数组方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let person = $state.raw(&#123;</span><br><span class="line">name: &#x27;Heraclitus&#x27;,</span><br><span class="line">age: 49</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// this will have no effect</span><br><span class="line">//这不会起作用</span><br><span class="line">person.age += 1;</span><br><span class="line"></span><br><span class="line">// this will work, because we&#x27;re creating a new person</span><br><span class="line">//这会起作用，因为创建了一个新对象</span><br><span class="line">person = &#123;</span><br><span class="line">name: &#x27;Heraclitus&#x27;,</span><br><span class="line">age: 50</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="state-snapshot"><a href="#state-snapshot" class="headerlink" title="$state.snapshot"></a>$state.snapshot</h2><p>要拍摄深度反应式<code>$state</code>代理的静态快照，请使用<code>$state.snapshot</code><br><span class="side">实际意思就是为了返回静态对象而不是Proxy</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">let counter = $state(&#123; count: 0 &#125;);</span><br><span class="line"></span><br><span class="line">function onclick() &#123;</span><br><span class="line">// Will log `&#123; count: ... &#125;` rather than `Proxy &#123; ... &#125;`</span><br><span class="line">console.log($state.snapshot(counter));</span><br><span class="line">&#125;</span><br><span class="line">  let counter = $state(&#123; count: 0 &#125;);</span><br><span class="line">  console.log(counter); // 输出的是 Proxy &#123; ... &#125;</span><br><span class="line">  console.log($state.snapshot(counter));</span><br><span class="line">  // 输出的是普通对象：&#123; count: 0 &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="把state传递给函数"><a href="#把state传递给函数" class="headerlink" title="把state传递给函数"></a>把state传递给函数</h2><div class='alert'>JavaScript 是一种按值传递的语言 — 当你调用一个函数时，参数是值而不是变量 。</div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function add(a: number, b: number) &#123;</span><br><span class="line">return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let a = 1;</span><br><span class="line">let b = 2;</span><br><span class="line">let total = add(a, b);</span><br><span class="line">console.log(total); // 3</span><br><span class="line"></span><br><span class="line">a = 3;</span><br><span class="line">b = 4;</span><br><span class="line">console.log(total); // still 3!</span><br></pre></td></tr></table></figure><p>实际意思就是，即使传入的变量定义为<code>$state</code>，传入函数中的值也是<code>$state</code>的当前值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function add(a: number, b: number) &#123;</span><br><span class="line">return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let a = $state(1);</span><br><span class="line">let b = $state(2);</span><br><span class="line">let total = add(a, b);</span><br><span class="line">console.log(total); // 3</span><br><span class="line"></span><br><span class="line">a++;</span><br><span class="line">b++;</span><br><span class="line">console.log(total); // still 3!</span><br></pre></td></tr></table></figure><h2 id="跨模块传递"><a href="#跨模块传递" class="headerlink" title="跨模块传递"></a>跨模块传递</h2><div class="alert"> 您可以在 .svelte.js 和 .svelte.ts 文件中声明状态，但只有在未直接重新分配该状态的情况下才能导出该状态。</div><p>即这样做是错误的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export let count = $state(0);</span><br><span class="line"></span><br><span class="line">export function increment() &#123;</span><br><span class="line">count += 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果跨模块导出，会导致这样的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// state.svelte.js</span><br><span class="line">export let count = $state(0);</span><br><span class="line"></span><br><span class="line">// another-file.js</span><br><span class="line">import &#123; count &#125; from &#x27;./state.svelte.js&#x27;;</span><br><span class="line">console.log(count); // 是一个对象，不是数字</span><br></pre></td></tr></table></figure><p>如果你把<code>count</code>导出到别的文件中，Svelte编译器无法知道这个<code>count</code>是响应式的，所以它不会自动处理<code>$.get()</code>和<code>$.set()</code>，就会出错或行为不符合预期。</p><h3 id="避免出错的方法"><a href="#避免出错的方法" class="headerlink" title="避免出错的方法"></a>避免出错的方法</h3><ol><li>不要重新赋值整个状态对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// state.svelte.js</span><br><span class="line">export const counter = $state(&#123;</span><br><span class="line">count: 0</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export function increment() &#123;</span><br><span class="line">counter.count += 1; // ✅ 只修改对象内部属性，不重新赋值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式可以导出响应式对象，只要你不对整个对象重新赋值（即不写<code>counter = &#123;...&#125;</code>），Svelte 编译器可以处理。</p><ol start="2"><li>不导出状态本身，而是导出访问器函数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// state.svelte.js</span><br><span class="line">let count = $state(0);</span><br><span class="line"></span><br><span class="line">export function getCount() &#123;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function increment() &#123;</span><br><span class="line">count += 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种方式中，<code>count</code>是模块内私有的，外部不能直接访问，只能通过函数间接访问和修改。这样 Svelte 编译器仍能正确转换状态操作。</p><h1 id="derived"><a href="#derived" class="headerlink" title="$derived"></a>$derived</h1><p>–TODO: derived</p><style>.side {  display: inline-block;  font-size: 12px;  margin-left: 4px;  background-color: #e0f0ff;  color: #003366;  padding: 1px 2px;  border-radius: 4px;  border: 1px solid #555;}.alert {  padding: 12px 16px;  border-radius: 8px;  margin-bottom: 12px;  font-size: 14px;  line-height: 1.4;  border: 1px solid transparent;  display: flex;  align-items: center;  box-shadow: 0 1px 3px rgba(0,0,0,0.08);  background-color: #fffbea; /* very light yellow */}</style>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sveltekit </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yazi配置</title>
      <link href="/2025/05/09/yazi%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/05/09/yazi%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>这篇文章用于记录如何在ubuntu24.04中配装和配置yazi</p><span id="more"></span><h1 id="yazi的安装"><a href="#yazi的安装" class="headerlink" title="yazi的安装"></a>yazi的安装</h1><p><a href="https://yazi-rs.github.io/docs/installation">官方文档</a></p><p>我选择brew安装<br>在终端中运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install yazi ffmpeg sevenzip jq poppler fd ripgrep fzf zoxide resvg imagemagick font-symbols-only-nerd-font</span><br></pre></td></tr></table></figure><p>除了<code>yazi</code>外这个命令还安装了必要的依赖项，可以删掉，但是可能会对功能造成影响</p><p><del>brew真的是很好的包管理器</del></p><h1 id="yazi的配置"><a href="#yazi的配置" class="headerlink" title="yazi的配置"></a>yazi的配置</h1><h2 id="配置启动命令"><a href="#配置启动命令" class="headerlink" title="配置启动命令"></a>配置启动命令</h2><p><a href="https://yazi-rs.github.io/docs/quick-start">官方文档</a></p><p>在安装完成后在命令行运行<code>yazi</code>就可以启动程序<br>但这还不够</p><p>在终端配置文件<code>.zshrc</code>,也可能是其他，添加以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function y() &#123;</span><br><span class="line">local tmp=&quot;$(mktemp -t &quot;yazi-cwd.XXXXXX&quot;)&quot; cwd</span><br><span class="line">yazi &quot;$@&quot; --cwd-file=&quot;$tmp&quot;</span><br><span class="line">if cwd=&quot;$(command cat -- &quot;$tmp&quot;)&quot; &amp;&amp; [ -n &quot;$cwd&quot; ] &amp;&amp; [ &quot;$cwd&quot; != &quot;$PWD&quot; ]; then</span><br><span class="line">builtin cd -- &quot;$cwd&quot;</span><br><span class="line">fi</span><br><span class="line">rm -f -- &quot;$tmp&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这可以让我们只用一个<code>y</code>就可以启动<code>yazi</code>，更重要的是在这样配置后，我们在<code>yazi</code>中跳转到某个位置退出后，终端会同步位置</p><h2 id="配置启动器"><a href="#配置启动器" class="headerlink" title="配置启动器"></a>配置启动器</h2><p><a href="https://yazi-rs.github.io/docs/faq/#why-cant-edit">官方文档</a></p><p>在<code>yazi</code>中，快捷键<code>o</code>可以打开文件，而在linux中默认的<code>EDITOR</code>是<code>vim</code></p><p>将其更改为<code>nvim</code></p><p>进行以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yazu Setup</span><br><span class="line">export EDITOR=&#x27;nvim&#x27;</span><br></pre></td></tr></table></figure><p>至此，<code>yazi</code>就可以使用了</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> yazi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvim实现剪切板与系统互通</title>
      <link href="/2025/05/07/nvim%E5%AE%9E%E7%8E%B0%E5%89%AA%E5%88%87%E6%9D%BF%E4%B8%8E%E7%B3%BB%E7%BB%9F%E4%BA%92%E9%80%9A/"/>
      <url>/2025/05/07/nvim%E5%AE%9E%E7%8E%B0%E5%89%AA%E5%88%87%E6%9D%BF%E4%B8%8E%E7%B3%BB%E7%BB%9F%E4%BA%92%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<p>这篇文章用于记录如何配置nivm的剪切板功能</p><span id="more"></span><h1 id="首先需要确保系统中安装了xclip"><a href="#首先需要确保系统中安装了xclip" class="headerlink" title="首先需要确保系统中安装了xclip"></a>首先需要确保系统中安装了xclip</h1><p><del>我使用Ubuntu</del><br>linux安装<code>xclip</code><br>在命令行中运行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xclip   # Debian/Ubuntu</span><br><span class="line">sudo pacman -S xclip     # Arch</span><br></pre></td></tr></table></figure><h1 id="配置快捷键"><a href="#配置快捷键" class="headerlink" title="配置快捷键"></a>配置快捷键</h1><p><del>我使用lazyvim</del><br>故执行需要<code>/home/prawn/.config/nvim/lua/config</code>在中添加以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 复制到剪贴板</span><br><span class="line">vim.keymap.set(&quot;v&quot;, &quot;&lt;leader&gt;y&quot;, &#x27;&quot;+y&#x27;, &#123; desc = &quot;复制到剪贴板&quot; &#125;)</span><br><span class="line">vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;Y&quot;, &#x27;&quot;+yg_&#x27;, &#123; desc = &quot;复制整行到剪贴板&quot; &#125;)</span><br><span class="line">vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;y&quot;, &#x27;&quot;+y&#x27;, &#123; desc = &quot;复制光标位置后的内容到剪贴板&quot; &#125;)</span><br><span class="line">vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;yy&quot;, &#x27;&quot;+yy&#x27;, &#123; desc = &quot;复制整行到剪贴板&quot; &#125;)</span><br><span class="line"></span><br><span class="line">-- 从剪贴板粘贴</span><br><span class="line">vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;p&quot;, &#x27;&quot;+p&#x27;, &#123; desc = &quot;从剪贴板粘贴&quot; &#125;)</span><br><span class="line">vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;P&quot;, &#x27;&quot;+P&#x27;, &#123; desc = &quot;从剪贴板粘贴到光标前&quot; &#125;)</span><br><span class="line">vim.keymap.set(&quot;v&quot;, &quot;&lt;leader&gt;p&quot;, &#x27;&quot;+p&#x27;, &#123; desc = &quot;粘贴到选中的区域&quot; &#125;)</span><br><span class="line">vim.keymap.set(&quot;v&quot;, &quot;&lt;leader&gt;P&quot;, &#x27;&quot;+P&#x27;, &#123; desc = &quot;粘贴到选中的区域&quot; &#125;)</span><br></pre></td></tr></table></figure><p>这样之后nvim和系统之间的剪切板就是通用的了</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nvim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu实现工作区循环</title>
      <link href="/2025/05/06/ubuntu%E5%AE%9E%E7%8E%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%BE%AA%E7%8E%AF/"/>
      <url>/2025/05/06/ubuntu%E5%AE%9E%E7%8E%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>这篇文章用于记录如何在ubuntu24.04中实现循环选择工作区</p><span id="more"></span><h1 id="安装插件管理器"><a href="#安装插件管理器" class="headerlink" title="安装插件管理器"></a>安装插件管理器</h1><p>在终端中运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install gnome-shell-extension-manager</span><br></pre></td></tr></table></figure><h1 id="在插件管理器中安装Workspace-Switcher插件"><a href="#在插件管理器中安装Workspace-Switcher插件" class="headerlink" title="在插件管理器中安装Workspace Switcher插件"></a>在插件管理器中安装Workspace Switcher插件</h1><p>在插件管理器中查找<code>Workspace Switcher</code>并安装即可</p><h1 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h1><p>在安装完成后可在已安装插件列表找到他，如图</p><p><img src="/2025/05/06/ubuntu%E5%AE%9E%E7%8E%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%BE%AA%E7%8E%AF/%E6%8F%92%E4%BB%B6%E5%9B%BE.png"></p><p>然后按照截图这样设置即可</p><p><img src="/2025/05/06/ubuntu%E5%AE%9E%E7%8E%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%BE%AA%E7%8E%AF/%E6%8F%92%E4%BB%B6%E8%AE%BE%E7%BD%AE.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux配置fastfetch</title>
      <link href="/2025/05/06/linux%E9%85%8D%E7%BD%AEfastfetch/"/>
      <url>/2025/05/06/linux%E9%85%8D%E7%BD%AEfastfetch/</url>
      
        <content type="html"><![CDATA[<p>这篇文章用于记录如何在ubuntu24.04中安装fastfetch并配置样式</p><span id="more"></span><h1 id="美化样式"><a href="#美化样式" class="headerlink" title="美化样式"></a>美化样式</h1><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>路径为 <code>~/.config/fastfetch/config.toml</code></p><p>个人比较喜欢这一套，直接复制即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$schema&quot;: &quot;https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json&quot;,</span><br><span class="line">    &quot;logo&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;small&quot;,</span><br><span class="line">        &quot;padding&quot;: &#123;</span><br><span class="line">            &quot;top&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;display&quot;: &#123;</span><br><span class="line">        &quot;separator&quot;: &quot; &quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;modules&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;╭───────────╮&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;custom&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│  user    │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;title&quot;,</span><br><span class="line">            &quot;format&quot;: &quot;&#123;user-name&#125;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│ 󰇅 hname   │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;title&quot;,</span><br><span class="line">            &quot;format&quot;: &quot;&#123;host-name&#125;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│ 󰅐 uptime  │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;uptime&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│ &#123;icon&#125; distro  │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;os&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│  kernel  │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;kernel&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│ 󰇄 desktop │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;de&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│  term    │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;terminal&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│  shell   │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│ 󰍛 cpu     │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cpu&quot;,</span><br><span class="line">            &quot;showPeCoreCount&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">       /* &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│ 󰍹 gpu     │&quot;,  // ★ GPU 模块</span><br><span class="line">            &quot;type&quot;: &quot;gpu&quot;</span><br><span class="line">        &#125;,*/</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│ 󰉉 disk    │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;disk&quot;,</span><br><span class="line">            &quot;folders&quot;: &quot;/&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│  memory  │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;memory&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│ 󰩟 network │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;localip&quot;,</span><br><span class="line">            &quot;format&quot;: &quot;&#123;ipv4&#125; (&#123;ifname&#125;)&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;├───────────┤&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;custom&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;│  colors  │&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;colors&quot;,</span><br><span class="line">            &quot;symbol&quot;: &quot;circle&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;╰───────────╯&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;custom&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置启动规则"><a href="#配置启动规则" class="headerlink" title="配置启动规则"></a>配置启动规则</h1><p>我使用zsh，因此配置在<code>~/.zshrc</code></p><h2 id="打开终端自动运行fastfetch"><a href="#打开终端自动运行fastfetch" class="headerlink" title="打开终端自动运行fastfetch"></a>打开终端自动运行fastfetch</h2><p>只需要在文件中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastfetch</span><br></pre></td></tr></table></figure><p>这一行即可</p><p>但是这会引出其他问题,我并不希望在任何地方，一打开终端就运行它，就比如vscode，cursor,nvim中</p><h2 id="配置启动规则-1"><a href="#配置启动规则-1" class="headerlink" title="配置启动规则"></a>配置启动规则</h2><p>为了不让fastfetch在任何地方都启动，需要添加规则</p><p>把配置文件中的<code>fastfetch</code>更改为下面这一段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># fastfetch</span><br><span class="line"># Run fastfetch only when NOT in VSCode terminal or nvim</span><br><span class="line">if [[ &quot;$TERM_PROGRAM&quot; != &quot;vscode&quot; &amp;&amp; -z &quot;$VSCODE_INJECTION&quot; &amp;&amp; -z &quot;$NVIM&quot; ]]; then</span><br><span class="line">  fastfetch</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这样就可以保证fastfetch只有在打开终端软件时才会运行</p><h1 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h1><h2 id="解决可能会变成黑白的问题"><a href="#解决可能会变成黑白的问题" class="headerlink" title="解决可能会变成黑白的问题"></a>解决可能会变成黑白的问题</h2><p>今天突然发现Ubuntu中配置的fastfetch在打开终端时，默认运行的那次fastfetch是黑白的</p><p>解决方法：<br>把<code>~/.zshrc</code>中的配置文件改成下面这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># fastfetch</span><br><span class="line"># Run fastfetch only when NOT in VSCode terminal or nvim</span><br><span class="line">if [[ &quot;$TERM_PROGRAM&quot; != &quot;vscode&quot; &amp;&amp; -z &quot;$VSCODE_INJECTION&quot; &amp;&amp; -z &quot;$NVIM&quot; ]]; then</span><br><span class="line">  fastfetch --pipe false</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>相关链接：<br><a href="https://github.com/fastfetch-cli/fastfetch?tab=readme-ov-file#q-fastfetch-runs-in-black-and-white-on-shell-startup-why">fastfetch README</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> fastfetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-mint安装fusuma手势控制</title>
      <link href="/2025/05/05/linux-mint%E5%AE%89%E8%A3%85fusuma%E6%89%8B%E5%8A%BF%E6%8E%A7%E5%88%B6/"/>
      <url>/2025/05/05/linux-mint%E5%AE%89%E8%A3%85fusuma%E6%89%8B%E5%8A%BF%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>这篇文章用于记录如何在linuxmint中安装fusuma来用触控板手势触发快捷键</p><span id="more"></span><h1 id="安装必要的库"><a href="#安装必要的库" class="headerlink" title="安装必要的库"></a>安装必要的库</h1><p>安装必要的包，终端输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libinput-tools</span><br><span class="line">sudo apt-get install xdotool</span><br><span class="line">sudo gem install fusuma</span><br></pre></td></tr></table></figure><p>第三个命令中<code>gem</code>需要<code>Ruby</code>环境<br>输入以下命令安装环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ruby</span><br></pre></td></tr></table></figure><h2 id="安装完成后输入命令以检测是否安装成功"><a href="#安装完成后输入命令以检测是否安装成功" class="headerlink" title="安装完成后输入命令以检测是否安装成功"></a>安装完成后输入命令以检测是否安装成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fusuma</span><br></pre></td></tr></table></figure><p><img src="/2025/05/05/linux-mint%E5%AE%89%E8%A3%85fusuma%E6%89%8B%E5%8A%BF%E6%8E%A7%E5%88%B6/%E6%B5%8B%E8%AF%95fusuma.png"><br>出现这样的输出证明安装成功</p><h1 id="书写配置文件"><a href="#书写配置文件" class="headerlink" title="书写配置文件"></a>书写配置文件</h1><h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.config/fusuma/config.yml</span><br></pre></td></tr></table></figure><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swipe:</span></span><br><span class="line">  <span class="attr">3:</span></span><br><span class="line">    <span class="attr">left:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key alt+Right&#x27;</span>  <span class="comment"># 切换到下一个工作区或窗口</span></span><br><span class="line">    <span class="attr">right:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key alt+Left&#x27;</span>   <span class="comment"># 切换到上一个工作区或窗口</span></span><br><span class="line">    <span class="attr">up:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key ctrl+t&#x27;</span>     <span class="comment"># 打开新标签页</span></span><br><span class="line">    <span class="attr">down:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key ctrl+w&#x27;</span>     <span class="comment"># 关闭当前标签页</span></span><br><span class="line">  <span class="attr">4:</span></span><br><span class="line">    <span class="attr">left:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key ctrl+alt+Right&#x27;</span>  <span class="comment"># 切换到下一个虚拟桌面</span></span><br><span class="line">    <span class="attr">right:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key ctrl+alt+Left&#x27;</span>   <span class="comment"># 切换到上一个虚拟桌面</span></span><br><span class="line">    <span class="attr">up:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key ctrl+alt+Down&#x27;</span>   <span class="comment"># 打开窗口切换器或访问不同的虚拟桌面</span></span><br><span class="line">    <span class="attr">down:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key ctrl+alt+Up&#x27;</span>     <span class="comment"># 切换到上一个虚拟桌面或打开窗口切换器</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pinch:</span></span><br><span class="line">  <span class="attr">2:</span></span><br><span class="line">    <span class="attr">in:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key ctrl+equal&#x27;</span>  <span class="comment"># 放大</span></span><br><span class="line">    <span class="attr">out:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key ctrl+minus&#x27;</span>  <span class="comment"># 缩小</span></span><br><span class="line">  <span class="attr">4:</span></span><br><span class="line">    <span class="attr">in:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key ctrl+v&#x27;</span>      <span class="comment"># 粘贴剪贴板内容</span></span><br><span class="line">    <span class="attr">out:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;xdotool key alt+F10&#x27;</span>     <span class="comment"># 最大化窗口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">threshold:</span></span><br><span class="line">  <span class="attr">swipe:</span> <span class="number">0.5</span>  <span class="comment"># 滑动手势的阈值设置为 50%</span></span><br><span class="line">  <span class="attr">pinch:</span> <span class="number">0.5</span>  <span class="comment"># 捏合手势的阈值设置为 50%</span></span><br><span class="line"></span><br><span class="line"><span class="attr">interval:</span></span><br><span class="line">  <span class="attr">swipe:</span> <span class="number">0.5</span>  <span class="comment"># 滑动手势的时间间隔设置为 0.5 秒</span></span><br><span class="line">  <span class="attr">pinch:</span> <span class="number">0.5</span>  <span class="comment"># 捏合手势的时间间隔设置为 0.5 秒</span></span><br></pre></td></tr></table></figure><p>随后只需更改对应的快捷键即可</p><p>参考链接<br><a href="https://www.cnblogs.com/robots2/p/18647326">linux mint安装触控板手势fusuma</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux-mint </tag>
            
            <tag> fusuma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu24.04用终端启动cursor</title>
      <link href="/2025/04/26/Ubuntu24-04%E7%94%A8%E7%BB%88%E7%AB%AF%E5%90%AF%E5%8A%A8cursor/"/>
      <url>/2025/04/26/Ubuntu24-04%E7%94%A8%E7%BB%88%E7%AB%AF%E5%90%AF%E5%8A%A8cursor/</url>
      
        <content type="html"><![CDATA[<p>此篇文章介绍如何在ubuntu24.04中用终端终端启动cursor</p><span id="more"></span><h1 id="下载cursor"><a href="#下载cursor" class="headerlink" title="下载cursor"></a>下载cursor</h1><p>前往<a href="https://www.cursor.com/cn/downloads">官网</a>，根据自己的设备下载对应版本的cursor即可</p><p><del>Ubuntu24自然下载的就是Appimage</del></p><h1 id="安装-libfuse2"><a href="#安装-libfuse2" class="headerlink" title="安装 libfuse2"></a>安装 libfuse2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install libfuse2</span><br></pre></td></tr></table></figure><p><del>其实我不用这个</del></p><p>有一个名为<a href="https://www.spark-app.store/download">星火软件商店</a>的软件<br>性质比较像archlinux的aur，是一个第三方的软件库，用户们会自行打包上传软件<br>里面就有旧版本的cursor，安装后就有了运行环境</p><h1 id="给Appimage执行权限"><a href="#给Appimage执行权限" class="headerlink" title="给Appimage执行权限"></a>给Appimage执行权限</h1><ul><li>命令行方法</li></ul><p>找到Appimage文件的位置并运行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /way/to/cusor/father</span><br><span class="line"><span class="built_in">chmod</span> +x cursor.AppImage</span><br></pre></td></tr></table></figure><ul><li>图形化方法</li></ul><p>打开文件管理器，找到appimage文件位置，右键文件，在属性中启用允许执行</p><p><img src="/2025/04/26/Ubuntu24-04%E7%94%A8%E7%BB%88%E7%AB%AF%E5%90%AF%E5%8A%A8cursor/PE.png"></p><p>给予执行权限后双击Appimage就可以启动cursor<br>或者使用命令行启动<code>cursor.AppImage --no-sandbox</code></p><h1 id="添加cursor快捷方式到命令行"><a href="#添加cursor快捷方式到命令行" class="headerlink" title="添加cursor快捷方式到命令行"></a>添加cursor快捷方式到命令行</h1><p>方法来源于cursor论坛中的<a href="https://forum.cursor.com/t/how-to-open-cursor-from-terminal/3757">这篇帖子</a></p><p>如果终端是zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后添加这么一段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function cursor &#123;</span><br><span class="line">  (nohup /path/to/cursor.appimage &quot;$@&quot; &gt; /dev/null 2&gt;&amp;1 &amp;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim ~/.bashrc</span><br></pre></td></tr></table></figure><p>然后添加这么一段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cursor() &#123;</span><br><span class="line">    /home/user/path_to_appimage/Cursor.AppImage &quot;$@&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br><span class="line">或是</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>至此，就可以运行cursor .<br>来在cursor中打开当前文件夹了</p><hr><p>相关文档：<a href="https://gist.github.com/evgenyneu/5c5c37ca68886bf1bea38026f60603b6">在 Ubuntu 24.04 上安装 Cursor AI 代码编辑器</a><br>这篇文章里面还提到了如何制作快捷方式</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> cursor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu24.04设置默认终端为kitty</title>
      <link href="/2025/04/24/Ubuntu24-04%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E4%B8%BAkitty/"/>
      <url>/2025/04/24/Ubuntu24-04%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E4%B8%BAkitty/</url>
      
        <content type="html"><![CDATA[<p>这篇文章用于记录如何在ubuntu24.04中安装kitty并将其设置为默认终端</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ubuntu默认的终端不支持图片预览，因此想要更换</p><h1 id="安装kitty"><a href="#安装kitty" class="headerlink" title="安装kitty"></a>安装kitty</h1><p><a href="https://sw.kovidgoyal.net/kitty/binary/#binary-install">官方文档</a>写的十分详细,只需要两个步骤即可完成安装</p><ol><li>在终端中运行如下指令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin</span><br></pre></td></tr></table></figure><ol start="2"><li>运行以下指令以创建快捷方式（可选）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create symbolic links to add kitty and kitten to PATH (assuming ~/.local/bin is in</span></span><br><span class="line"><span class="comment"># your system-wide PATH)</span></span><br><span class="line"><span class="built_in">ln</span> -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten ~/.local/bin/</span><br><span class="line"><span class="comment"># Place the kitty.desktop file somewhere it can be found by the OS</span></span><br><span class="line"><span class="built_in">cp</span> ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/</span><br><span class="line"><span class="comment"># If you want to open text files and images in kitty via your file manager also add the kitty-open.desktop file</span></span><br><span class="line"><span class="built_in">cp</span> ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/</span><br><span class="line"><span class="comment"># Update the paths to the kitty and its icon in the kitty desktop file(s)</span></span><br><span class="line">sed -i <span class="string">&quot;s|Icon=kitty|Icon=<span class="subst">$(readlink -f ~)</span>/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g&quot;</span> ~/.local/share/applications/kitty*.desktop</span><br><span class="line">sed -i <span class="string">&quot;s|Exec=kitty|Exec=<span class="subst">$(readlink -f ~)</span>/.local/kitty.app/bin/kitty|g&quot;</span> ~/.local/share/applications/kitty*.desktop</span><br><span class="line"><span class="comment"># Make xdg-terminal-exec (and hence desktop environments that support it use kitty)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;kitty.desktop&#x27;</span> &gt; ~/.config/xdg-terminals.list</span><br></pre></td></tr></table></figure><p>至此kitty就已经安装成功了</p><h1 id="设置kitty为默认终端"><a href="#设置kitty为默认终端" class="headerlink" title="设置kitty为默认终端"></a>设置kitty为默认终端</h1><p>虽然现在已经安装了kitty，但是点击快捷键<code>ctrl+alt+t</code>呼出的还是ubuntu默认的快捷键</p><p>这就需要更换默认终端</p><ol><li>查找kitty的位置</li></ol><p>软件默认安装在<code>/home/&#123;用户名&#125;/.local/kitty.app/bin/kitty</code><br>如果路径不对，就全局搜索名字为<code>kitty</code>的文件，找到那个点击就可以运行终端的文件的路径</p><ol start="2"><li>注册 kitty 作为终端选项</li></ol><p>运行这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/bin/kitty 50</span><br><span class="line">// /usr/bin/kitty 代表第一步中找到的文件的路径，更换为真实路径</span><br></pre></td></tr></table></figure><ol start="3"><li>选择kitty为默认终端</li></ol><p>在终端运行这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-alternatives --config x-terminal-emulator</span><br></pre></td></tr></table></figure><p>会看到以下页面<br><img src="/2025/04/24/Ubuntu24-04%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF%E4%B8%BAkitty/image.png"></p><p>选择kitty即可（键入1）</p><p>至此，成功安装了kitty并将其设置为了默认终端，用终端快捷键<code>ctrl+alt+t</code>检查，呼出的是kitty终端，操作结束</p><h1 id="后记-4-26"><a href="#后记-4-26" class="headerlink" title="后记-4.26"></a>后记-4.26</h1><p>kitty不支持fcitx4，有相关需要的注意</p><h1 id="后记-4-26-1"><a href="#后记-4-26-1" class="headerlink" title="后记-4.26"></a>后记-4.26</h1><p>wezterm支持fcitx4，同时也支持图片预览功能<br>依照上方的教程把默认的终端更改为wezterm</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu24.04安装搜狗输入法</title>
      <link href="/2025/04/19/Ubuntu24-04%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>/2025/04/19/Ubuntu24-04%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>此篇文章介绍如何在ubuntu24.04中安装搜狗输入法</p><span id="more"></span><h1 id="更换fcitx版本"><a href="#更换fcitx版本" class="headerlink" title="更换fcitx版本"></a>更换fcitx版本</h1><p>目前搜狗输入法官网的linux版适用于fcitx4，而ubuntu24.04自带fcitx5（且二者不兼容）所以首先要做的是更换fcitx版本</p><ol><li>卸载ubuntu原有的fcitx5</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge fcitx5</span><br></pre></td></tr></table></figure><ol start="2"><li>更新</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade </span><br></pre></td></tr></table></figure><ol start="3"><li>此时系统应该会提醒有未卸载的fcitx5依赖项,卸载这些依赖包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove </span><br></pre></td></tr></table></figure><ol start="4"><li>此时再安装fcitx</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fcitx</span><br></pre></td></tr></table></figure><ul><li><p><strong>此时应该会提示未完全卸载的</strong> <code>“fcitx5-chinese-addons-data : 冲突: fcitx-data 但是 1:4.2.9.9-2build2 正要被安装”</code></p></li><li><p>卸载<code>fcitx5-chinese-addons-data</code>即可</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove fcitx5-chinese-addons-data</span><br></pre></td></tr></table></figure><ul><li>此时再运行安装命令,即可完成安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fcitx</span><br></pre></td></tr></table></figure><h1 id="更换输入法框架"><a href="#更换输入法框架" class="headerlink" title="更换输入法框架"></a>更换输入法框架</h1><p>在语言支持中，更换输入法框架为<code>fcitx4</code></p><p><img src="/2025/04/19/Ubuntu24-04%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/%E6%9B%B4%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95%E6%A1%86%E6%9E%B6.png"></p><h1 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h1><p>前往<a href="https://shurufa.sogou.com/linux">搜狗输入法官网</a>下载对应的deb安装包即可</p><p>点击下载后会弹出<a href="https://shurufa.sogou.com/linux/guide">官方教程</a></p><p>deb安装包下载好后可以直接双击安装包进行安装，也可以通过命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i sogoupinyin_4.2.1.145_amd64.deb </span><br></pre></td></tr></table></figure><p>即可完成安装</p><p>安装好后这样配置</p><p><img src="/2025/04/19/Ubuntu24-04%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95.png"></p><h1 id="配置默认激活输入法"><a href="#配置默认激活输入法" class="headerlink" title="配置默认激活输入法"></a>配置默认激活输入法</h1><p>经过上述步骤后，搜狗输入法已经安装完成，但是存在一个问题，输入法默认是没有激活的</p><p>这导致我们每次开机后要点击<strong>ctrl+space</strong>以激活输入法</p><p>开机后进入fcitx配置</p><p><img src="/2025/04/19/Ubuntu24-04%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/%E9%85%8D%E7%BD%AE%E8%BE%93%E5%85%A5%E6%B3%95%E9%BB%98%E8%AE%A4%E6%BF%80%E6%B4%BB.png"></p><p>经过这样的设置后，开机搜狗输入法就会默认激活了</p><hr><p>参考链接：<a href="https://blog.csdn.net/weixin_44009267/article/details/144539057">24.04的搜狗输入法安装</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-popconfirm样式修改</title>
      <link href="/2025/04/03/el-popconfirm%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/"/>
      <url>/2025/04/03/el-popconfirm%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>这篇文章用于记录如何修改el-popconfirm的弹窗样式</p><span id="more"></span><h1 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h1><p>在项目中使用el-popconfirm时，发现默认的弹窗样式与项目中的样式不符，需要进行修改</p><h1 id="解决1"><a href="#解决1" class="headerlink" title="解决1"></a>解决1</h1><p>这个问题很好解决，打开F12，很容易就可以找到弹窗的div结构，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ant-popover-inner&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tooltip&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ant-popover-inner-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ant-popconfirm-inner-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ant-popconfirm-message&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ant-popconfirm-message-icon&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">role</span>=<span class="string">&quot;img&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;exclamation-circle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;anticon anticon-exclamation-circle&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">focusable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">data-icon</span>=<span class="string">&quot;exclamation-circle&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1em&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1em&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;64 64 896 896&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">d</span>=<span class="string">&quot;M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!----&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ant-popconfirm-message-title&quot;</span>&gt;</span>确认删除当前系统？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!----&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ant-popconfirm-buttons&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">&quot;css-dev-only-do-not-override-1g91or ant-btn ant-btn-default ant-btn-sm&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span><span class="comment">&lt;!----&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">&quot;css-dev-only-do-not-override-1g91or ant-btn ant-btn-primary ant-btn-sm&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span><span class="comment">&lt;!----&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>确 认<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那想要修改样式就很简单了，只需要修改对应的css样式即可，例如我想要修改确认按钮的背景色为红色，只需要修改如下css样式即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ant-btn-primary</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是不总是这么顺利的</p><h1 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h1><p>项目中可能有很多的弹窗，而上面这种方法会修改所有的弹窗，导致其他弹窗的样式也发生了变化，那怎么办呢？</p><h1 id="解决2"><a href="#解决2" class="headerlink" title="解决2"></a>解决2</h1><p>这种时候我们一定会想到给弹窗加一个唯一的class，然后修改这个class的样式，例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red-popconfirm</span> &#123;</span><br><span class="line">    <span class="selector-class">.ant-btn-primary</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以只修改指定弹窗的样式了</p><p>在查看<a href="https://element-plus.org/zh-CN/component/popconfirm.html#api">官方文档</a>后，并没有找到给弹窗添加class的方法</p><p>但是我们看到这样一句话</p><blockquote><p>Popconfirm 的属性与 Popover 很类似， 因此对于重复属性，请参考 Popover 的文档，在此文档中不做详尽解释。</p></blockquote><p>于是我们转到<a href="https://element-plus.org/zh-CN/component/popover.html#api">Popover的文档</a>，在文档中找到了<code>popper-class</code>属性，如下</p><p><code>popper-class</code> 为 popper 添加类名 <code>string</code></p><p>于是我们就可以给弹窗添加一个唯一的class，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-popconfirm popper-class=&quot;red-popconfirm&quot;&gt;</span><br><span class="line">    &lt;el-button&gt;点击&lt;/el-button&gt;</span><br><span class="line">&lt;/el-popconfirm&gt;</span><br></pre></td></tr></table></figure><p>这样就可以给弹窗添加一个唯一的class了</p>]]></content>
      
      
      
        <tags>
            
            <tag> ElementPlus </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm_mitt</title>
      <link href="/2025/03/28/npm-mitt/"/>
      <url>/2025/03/28/npm-mitt/</url>
      
        <content type="html"><![CDATA[<p>这篇文章用于记录一个很有用的组件间通信的库&#x3D;&#x3D;mitt</p><span id="more"></span><h1 id="什么是mitt"><a href="#什么是mitt" class="headerlink" title="什么是mitt"></a>什么是mitt</h1><p>mitt是一个轻量级的、零依赖的、事件驱动的库，用于在组件之间进行通信。它提供了一个简单的方式来发送和接收事件，而不需要依赖复杂的框架或库。</p><p>可以做到：</p><ul><li>组件间通信</li><li>父子组件通信</li><li>兄弟组件通信</li><li>跨级组件通信</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save mitt</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span>  <span class="comment">// 引入mitt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()  <span class="comment">// 创建emitter实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送事件</span></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;test&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>具体解释：</p><ul><li><p>监听事件：emitter.on(‘test’, (data) &#x3D;&gt; {<br>console.log(data)<br>})</p><p>其中test是事件名，这个名字可以自定义，(data) &#x3D;&gt; {<br>  console.log(data)<br>}是事件回调函数，即在其他地方通过这个名字，就可以触发这个回调函数<br>也可以写成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;test&#x27;</span>, fn)</span><br></pre></td></tr></table></figure></li><li><p>发送事件：emitter.emit(‘test’, ‘hello’)</p><p>其中test是事件名，hello是事件参数</p><p>根据事件名，可以发送多个参数，视监听时间时绑定的函数而定</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SvelteKit学习-day1</title>
      <link href="/2025/03/22/SvelteKit-day1/"/>
      <url>/2025/03/22/SvelteKit-day1/</url>
      
        <content type="html"><![CDATA[<p>此篇文章介绍如何创建一个sveltekit项目</p><span id="more"></span><h1 id="创建一个sveltekit项目"><a href="#创建一个sveltekit项目" class="headerlink" title="创建一个sveltekit项目"></a>创建一个sveltekit项目</h1><p>只需运行命令<code>npx sv create %项目名%</code>即可开始创建</p><p>随后在弹出的命令行按需选择即可</p><ol><li><p>选择生成的框架类型<br><img src="/2025/03/22/SvelteKit-day1/1.png"></p><ol><li>SvelteKit demo app<br>特点：创建一个简单的用于展示的 Demo 项目，通常包含一个猜谜游戏等示例内容。<br>适用场景：主要用于学习和演示 SvelteKit 的基本功能，帮助开发者快速了解其工作方式。<br>项目结构：会包含一些预设的页面和功能，方便用户直接运行和查看效果。</li><li>Skeleton project<br>特点：生成一个基本的应用骨架，包含最基础的文件和目录结构，没有过多的预设内容。<br>适用场景：适合正式的项目开发，开发者可以根据自己的需求自由添加页面、组件和功能。<br>项目结构：通常包含基本的 src 目录、routes 文件夹、app.html 等，适合从零开始构建项目。</li><li>Library skeleton project<br>特点：用于创建 Svelte 组件库或其他库项目，提供了一个适合开发库的基础结构。<br>适用场景：如果需要开发一个可复用的 UI 组件库或其他库，这个类型是最佳选择。<br>项目结构：会包含一些用于构建和打包库的配置文件和目录结构，支持通过 svelte-package 插件进行分发。</li></ol></li><li><p>选择是否在项目中添加 TypeScript 的类型检查功能<br><img src="/2025/03/22/SvelteKit-day1/2.png"></p><ol><li>Yes, using TypeScript syntax<br>选择这个选项会将项目转换为使用 TypeScript 语法。这意味着你的代码文件将从 .js 扩展名改为 .tsx 或 .ts（取决于是否使用了 React），并且你可以利用 TypeScript 提供的类型系统来增强代码的可读性和可维护性。</li><li>Yes, using JavaScript with JSDoc comments<br>选择这个选项会在项目中使用 JavaScript 语法，但通过 JSDoc 注释来提供类型信息。JSDoc 是一种在 JavaScript 代码中添加文档注释的方式，这些注释可以用来描述函数、变量等的类型信息。这种方式不需要将代码转换为 TypeScript 语法，但仍然可以提供一定程度的类型检查。</li><li>No<br>选择这个选项表示不添加类型检查。项目将继续保持使用纯 JavaScript 语法，不使用 TypeScript 或 JSDoc 注释来提供类型信息。</li></ol></li><li><p>根据需求预装插件<br><img src="/2025/03/22/SvelteKit-day1/3.png"><br>可使用方向键移动，空格键选择，回车键进入下一步</p><ul><li>prettier：一个流行的代码格式化工具，可以帮助开发者以一致的风格格式化代码。它支持多种编程语言，并且可以通过配置文件自定义格式化规则。</li><li>eslint：一个 JavaScript 代码质量和代码风格检查工具。它可以帮助开发者发现代码中的错误，并且可以配置规则来强制执行特定的代码风格。（这个插件比prettier更加严格，严格到可以规定使用单引号还是双引号）</li><li>vitest：一个快速的单元测试框架，用于测试 JavaScript 和 TypeScript 代码。</li><li>playwright：一个用于自动化浏览器测试的工具，支持多种浏览器和多种测试场景。</li><li>tailwindcss：一个实用优先的 CSS 框架，用于快速构建自定义设计的工具。</li><li>sveltekit-adapter：SvelteKit 的适配器，用于部署 SvelteKit 应用。</li><li>drizzle：一个用于构建和连接数据库的库，通常与 Next.js 一起使用。</li><li>lucia：一个用于构建用户界面的库，可能是一个特定项目的内部工具或库。</li><li>mdsvex：一个将 Markdown 文件转换为 Svelte 组件的工具，常用于构建静态网站。</li><li>paraglide：一个用于适配多种语言的插件。</li><li>storybook：一个前端组件开发环境，允许开发者在隔离的环境中开发和测试 UI 组件</li></ul></li><li><p>选择包管理器<br><img src="/2025/03/22/SvelteKit-day1/4.png"><br>关于各种包管理器的比较有很多，这里不多赘述</p></li></ol><p>至此，项目创建完成，运行以下命令即可运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: cd 项目名                                                               </span><br><span class="line">2: git init &amp;&amp; git add -A &amp;&amp; git commit -m &quot;Initial commit&quot; (optional)  </span><br><span class="line">3: npm run dev -- --open</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sveltekit </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github＆clash-verge</title>
      <link href="/2025/03/17/github%EF%BC%86clash-verge/"/>
      <url>/2025/03/17/github%EF%BC%86clash-verge/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>因为众所周知的原因，国内无法直连github</p><p>这就导致国内的开发者很难使用github的服务，在一些情况下，clash这样的代理软件打开后虽然浏览器可以访问github，但是 <code>git push</code>和 <code>git pull</code>这些命令却不能正常使用</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="代理查询"><a href="#代理查询" class="headerlink" title="代理查询"></a>代理查询</h2><p>首先我们在输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy</span><br><span class="line">git config --global https.proxy</span><br></pre></td></tr></table></figure><p>这可以检测我们是否使用了git 代理</p><h2 id="代理取消"><a href="#代理取消" class="headerlink" title="代理取消"></a>代理取消</h2><p>如果使用了的话，我们需要先取消它们<br>通过以下命令实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>运行完成后再次使用代理检测中的命令检测是否取消成功</p><h2 id="重新设置代理"><a href="#重新设置代理" class="headerlink" title="重新设置代理"></a>重新设置代理</h2><p>首先我们要知道自己的代理软件的服务器地址，一般为 <code>127.0.0.1:****</code><br><code>****</code>为端口号，这个需要查看自己的软件，不能照搬<br><img src="/2025/03/17/github%EF%BC%86clash-verge/1742198026901.png"><br>从这里可以看出我的端口是 <code>7897</code>，则需要运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7897</span><br><span class="line">git config --global https.proxy 127.0.0.1:7897</span><br></pre></td></tr></table></figure><p>命令运行后可再次运行检测代理命令来查看是否设置成功</p><h2 id="设置完成"><a href="#设置完成" class="headerlink" title="设置完成"></a>设置完成</h2><p>至此，设置完成，就可以正常推送拉取</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次失败的linux</title>
      <link href="/2025/03/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84linux/"/>
      <url>/2025/03/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84linux/</url>
      
        <content type="html"><![CDATA[<h1 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h1><p>经过在移动硬盘安装linux mint并顺利在笔记本运行后，虾决定在即将组装的主机上安装arch linux 并安装hyprland，然而事情并没有想象中那么顺利</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在安装arch的过程中，教程可以通过命令行连接到wifi，而我不行，后来是通过usb线从手机联网的（其实这里就应该意识到的），在安装上后，发现压根没有wifi按钮，意识到，没有驱动，而linux的驱动似乎不生效，主板官网的驱动也只支持windows<br>ps：主板用的华硕 b650 ayw，上面的网卡是 联发科 7902<br>也想过买一个免驱动的usb无线网卡，而市面上的大多数都只支持到6.5版本的内核，而我安装的ubuntu 24.04 内核版本为6.11，没有可用的</p><h1 id="最后的决定"><a href="#最后的决定" class="headerlink" title="最后的决定"></a>最后的决定</h1><p>在多次尝试无果后，决定放弃，台式机的硬件不比笔记本，在安装中会遇到各种各样的问题，最后决定用回windows</p><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>Q：为什么想要linux？<br>A：并不是因为linux的低占用或是炫酷的hyprland，主要是身为一名代码开发者，我需要在电脑上安装各种各样的开发环境，而windows的安装体验令我痛苦不已，相比linux只需一行<code> apt install</code>或是<code>pacman -S install</code>就可以解决的事情，在windows上的安装简直就是折磨。即使这次用回windows，我也不会再通过那种方法进行开发</p><p>Q：那你要怎么做<br>A：docker，在vscode存在插件允许我们在容器内进行代码开发，这样一来就不必在windows配置开发环境，对环境的更换也方便得多，也不必担心不同开发环境中的冲突（这个题材将会在后续发数个博客，给自己立flag）</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>此次失败的原因主要是没有实现了解所买硬件对linux的支持情况，谨以此文章警示以后的自己和其他想要安装linux的人</p><h1 id="后记-4-26"><a href="#后记-4-26" class="headerlink" title="后记-4.26"></a>后记-4.26</h1><p>ax210加上一块pcie网卡转接板，什么都解决了，还是Intel驱动全<br>最后安装了Ubuntu，无需安装任何驱动，直接可用，WiFi，BlueTooth功能全部正常</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
